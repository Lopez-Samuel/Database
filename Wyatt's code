@app.route('/comment', methods=['GET', 'POST'])


def addComment():
    username=session['username']
    id=session['id']
    cursor=conn.cursor()
    comment=request.form['comment']
    query="INSERT INTO comment('id', 'username', 'comment') VALUES (%i, %s, %s,)"
    cursor.execute(query, (id, username, comment))
    conn.commit()
    cursor.close()
    return render_template('home.html')
    
    
 CREATE TABLE likes(
	username VARCHAR (50),
	id INT,
	FOREIGN KEY (username) REFERENCES Person(username),
	FOREIGN KEY (id) REFERENCES content(id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

@app.route('/like', methods=['GET', 'POST'])
def like():
    username=session['username']
    id=session['id']
    cursor=conn.cursor()
    query="INSERT INTO likes('id', 'username',) VALUES (%i, %s,)"
    cursor.execute(query, (id, username))
    conn.commit()
    cursor.close()
    return render_template('home.html')

@app.route('/view/<int:line_id>', methods=['GET', 'POST'])
def view(line_id):
    id=line_id
    username=session['username']
    cursor=conn.cursor()
    query="SELECT count(*) as num FROM likes WHERE id=%s GROUP BY id"%(id)
    cursor.execute(query, (username, id))
    number_of_likes=cursor.fetchone()
    query="SELECT file_path, username, timest, content_name FROM content WHERE id=%s"%(id)
    cursor.execute(content, (query, id))
    line=cursor.fetchone()
    query="SELECT comment_text FROM comment WHERE id=%s"%(id)
    cursor.execute(content, (query, id))
    comments=cursor.fetchall()
    conn.commit()
    cursor.close()
    return render_template('view.html', username=username, id=line_id, data=line, number_of_likes=number_of_likes, comments=comments)
    
    
    
    
    
    
 in home:
 
 
query="SELECT id, username_tagger, content_name FROM tag JOIN content ON tag.id=content.id WHERE tag.username_taggee= '%s' AND tag.status='0'"
cursor.execute(query, (username))
pending_tags=cursor.fetchall()



@app.route('/approve/<str:un>/<str:un_tagger/<int:line_id>', methods=['GET', 'POST'])
def approve(un, un_tagger, line_id)
    cursor=conn.cursor()
    query="UPDATE tag  set status='1' WHERE tag.username_tagger=%s, tag.Username_taggee=%s, tag.id=%s"
    cursor.execute(query, (un, un_tagger, line_id))   
    cursor.execute()
@app.route('/ignore/<str:un>/<str:un_tagger/<int:line_id>', methods=['GET', 'POST'])
def ignore(un, un_tagger, line_id)
    cursor=conn.cursor()
    query="UPDATE tag  set status='0' WHERE tag.username_tagger=%s, tag.Username_taggee=%s, tag.id=%s"
    cursor.execute(query, (un, un_tagger, line_id))   
@app.route('/deny/<str:un>/<str:un_tagger/<int:line_id>', methods=['GET', 'POST'])
def delete(un, un_tagger, line_id)
    cursor=conn.cursor()
    query="DELETE FROM tag WHERE tag.username_tagger=%s, tag.Username_taggee=%s, tag.id=%s"
    cursor.execute(query, (un, un_tagger, line_id))   
    cursor.execute()
in home.html:


PENDING TAGS
 <table>
        <th>Tagger</th>
        <th>content name</th>
	<th>Approve</th>
	<th>Deny</th>

        {% for line in pending_tags %}
        <tr>
            <td>{{line.username_tagger}}</td>
            <td>{{line.content_name}}</td>
            <td>
                <form action="/approve/" method="POST">
                    <input type="submit" value=approve />
                </form>
            </td>
            <td>
                <form action="/deny/{{username}}/{{line.username_tagger}}/{{line.id}}" method="POST">
                    <input type="submit" value=deny />
                </form>
            </td>
        {% endfor %}
    </table>

</table>

    
IN View:
query="SELECT first_name, last_name FROM Person LEFT OUTER JOIN tag ON tag.username_taggee=Person.username WHERE tag.status='1' AND tag.id=%s"
cursor.execute(query, (id, username, comment))
tags=cursor.fetchall()





    

